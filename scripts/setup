#!.venv/bin/python
"""Dotfile synchroniser.

- read from ~/.dotfiles.toml
- locate and "load" the repositories declared there
- synchronise the dotfiles, using the repository file trees as "source of truth"
"""

import sys

if sys.version_info[:2] < (3, 7):
    raise EnvironmentError("Need Python 3.7+")

import enum
import itertools
import os
import shutil
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, Iterable, List, Optional, Tuple

import rich
import tomli as toml
from rich.markup import escape
from rich.table import Table

# --------------------------------------------------------------------------------------
# For dealing with files that already exist
# --------------------------------------------------------------------------------------
_ACTION: Optional[str] = None


@enum.unique
class Action(enum.Enum):
    NOTHING = ""
    SKIP = "s"
    UPDATE = "u"
    BACKUP = "b"

    SKIP_ALL = "S"
    UPDATE_ALL = "U"
    BACKUP_ALL = "B"

    @staticmethod
    def get_user_choice(*, source: Path, target: Path) -> "Action":
        global _ACTION
        if _ACTION is not None:
            return Action(_ACTION)

        valid_values = "subSUB"
        options = [f"[{c}]{Action(c).name[1:].lower()}" for c in valid_values]

        rich.print(f"Target already exists: [blue]{escape(str(target))}[/]")
        # TODO: Present a diff here, and assume "skip" if there's no difference.
        rich.print(f"What do you want to do? [green]{escape(', '.join(options))}[/]")

        # Get and validate input
        action = input("-> ")
        while action not in valid_values:
            rich.print(
                "[red]Not a valid option.[/] Please provide one of: "
                f"[green]{'[/], [green]'.join(valid_values)}[/]"
            )
            action = input("-> ")

        # Set the action
        if action.isupper():
            _ACTION = action.lower()

        return Action(action.lower())


# --------------------------------------------------------------------------------------
# Abstraction for interacting with repositories
# --------------------------------------------------------------------------------------
@dataclass
class DotFile:
    comes_from: "Repository"
    source: Path
    destination: Path

    def __post_init__(self):
        assert self.source.is_absolute()
        assert not self.destination.is_absolute()


@dataclass
class Repository:
    """Represents a repository, that contains files that have to be copied."""

    name: str
    base_directory: Path
    source_directory: Path = field(init=False)

    def __post_init__(self) -> None:
        assert self.base_directory.is_absolute()
        self.source_directory = self.base_directory / "src"

    def get_targets(self) -> Iterable[DotFile]:
        for root_str, dirs, files in os.walk(self.source_directory):
            for item in files:
                # Figure out a good name, if it needs to be brought over.
                if item.startswith("symlink."):
                    target_name = item[7:]
                elif item.endswith(".symlink"):
                    target_name = item[:-8]
                elif ".symlink." in item:
                    target_name = item.replace(".symlink", "")
                else:
                    continue

                root = Path(root_str)
                source = root / item
                destination = self.compute_target(root, target_name)
                assert not destination.is_absolute()

                yield DotFile(
                    comes_from=self,
                    source=source,
                    destination=destination,
                )

    def compute_target(self, root: Path, target_name: str) -> Path:
        root_relative = root.relative_to(self.source_directory)

        # Trim the "topic" section
        return Path(*root_relative.parts[1:], target_name)


# --------------------------------------------------------------------------------------
# Abstraction for loading configuration
# --------------------------------------------------------------------------------------
@dataclass
class Configuration:
    filepath: Path

    repositories: Dict[str, Repository] = field(init=False, default_factory=dict)
    conflicts: Dict[Path, List[str]] = field(init=False, default_factory=dict)

    def __post_init__(self):
        with open(self.filepath, "rb") as f:
            data = toml.load(f)

        # TODO: validation?

        for name, location in data["repositories"].items():
            repo_location = Path(location)
            assert repo_location.exists()
            assert repo_location.is_absolute()
            self.repositories[name] = Repository(name, repo_location)

        for conflict in data.get("conflicts", []):
            filepath = conflict["file"]
            use = conflict["use"]
            assert isinstance(filepath, str)
            assert isinstance(use, str)

            if filepath in self.conflicts:
                raise ValueError(f"Got duplicate file in config: {filepath}")
            if use not in self.repositories:
                raise ValueError(f"Got unknown repository ({use}) for {filepath}")

            self.conflicts[Path(filepath)] = use


# --------------------------------------------------------------------------------------
# Filesystem I/O
# --------------------------------------------------------------------------------------
def show_io(
    color: str,
    action: str,
    target: Path,
    *,
    src: Optional[Path] = None,
    comes_from: str = "unset",
):
    if target.is_relative_to(Path.home()):
        target = Path("~") / target.relative_to(Path.home())

    action_str = f"\\[{action}]"
    target_str = escape(str(target))

    output = Table.grid(padding=(0, 1))
    output.expand = True

    output.add_column(style=color)
    output.add_column(style="blue", ratio=1, overflow="fold")

    if src is not None:
        src_parts = src.parts
        if "src" in src_parts:
            src = Path(*src_parts[src_parts.index("src") :])

        src_str = escape(str(src))
        comes_from_str = f"\\[{comes_from}]"

        output.add_column(style="bold cyan")
        output.add_column(style="cyan", ratio=2, overflow="fold")
        output.add_row(action_str, target_str, comes_from_str, src_str)
    else:
        output.add_row(action_str, target_str)

    rich.print(output)


def symlink(src: Path, target: Path, *, comes_from: str, dry_run: bool) -> None:
    assert src.exists()

    show_io("cyan", " link ", target, src=src, comes_from=comes_from)

    if dry_run:
        return

    assert not (target.exists() or target.is_symlink())
    os.makedirs(target.parent, exist_ok=True)
    os.symlink(src, target)


def backup(path: Path, *, dry_run: bool) -> None:
    assert path.is_file()

    show_io("magenta", "backup", path)

    if dry_run:
        return

    target = path.with_suffix(path.suffix + ".backup")
    assert not (target.exists() or target.is_symlink())

    os.makedirs(target.parent)
    shutil.copy(path, target)
    os.remove(path)


def remove(target: Path, *, dry_run: bool) -> None:
    assert target.exists() or target.is_symlink()

    show_io("red", "remove", target)

    if dry_run:
        return

    os.remove(target)


# --------------------------------------------------------------------------------------
# Synchronising files
# --------------------------------------------------------------------------------------
def _compute_final_file_set(config: Configuration) -> Iterable[Tuple[str, DotFile]]:
    """Returns {dest: str} paths for what needs to be copied over."""
    repositories = {
        name: {dotfile.destination: dotfile for dotfile in repository.get_targets()}
        for name, repository in config.repositories.items()
    }
    for name, repository in config.repositories.items():
        assert len(repositories[name]) == len(
            list(repository.get_targets())
        ), f"{name} has duplicates!"

    all_dotfiles = set(
        *itertools.chain(repo_dotfiles for repo_dotfiles in repositories.values())
    )

    resolved_dotfiles: Dict[Path, DotFile] = dict()
    source_repository: Dict[Path, str] = dict()
    all_conflicting_targets = set()
    for target in all_dotfiles:
        for name, repo_dotfiles in repositories.items():
            if target not in repo_dotfiles:
                continue

            # There's a conflict!
            if target in resolved_dotfiles:
                del resolved_dotfiles[target]
                all_conflicting_targets.add(target)
                break

            resolved_dotfiles[target] = repo_dotfiles[target]
            source_repository[target] = name

    # Ensure that we have a resolution for every conflict
    config_conflict_targets = set(config.conflicts.keys())
    if config_conflict_targets != all_conflicting_targets:
        raise Exception(
            "Conflict resolution mismatch! (provided resolutions != actual conflicts)\n"
            f"{config_conflict_targets} != {all_conflicting_targets}"
        )

    for target, name in config.conflicts.items():
        resolved_dotfiles[target] = repositories[name][target]
        source_repository[target] = name

    for dotfile in resolved_dotfiles.values():
        yield source_repository[dotfile.destination], dotfile


def sync_files(config: Configuration, *, target_dir: Path, dry_run: bool) -> None:
    assert target_dir.is_absolute()
    # Generate a merged set of files to copy over
    resolved_dotfiles = _compute_final_file_set(config)

    for comes_from, dotfile in sorted(
        resolved_dotfiles, key=lambda x: x[1].destination
    ):
        target = target_dir / dotfile.destination

        # Don't try to overwrite a correct symlink.
        if target.is_symlink() and target.samefile(dotfile.source):
            symlink(
                dotfile.source,
                target,
                dry_run=True,
                comes_from=comes_from,
            )
            continue

        if target.exists() or target.is_symlink():
            # TODO: Figure out how to sanity-check this situation.
            action = Action.get_user_choice(source=dotfile.source, target=target)
            if action == Action.UPDATE:
                remove(target, dry_run=dry_run)
            elif action == Action.SKIP:
                continue
            elif action == Action.BACKUP:
                backup(target, dry_run=dry_run)

        symlink(
            dotfile.source,
            target,
            dry_run=dry_run,
            comes_from=comes_from,
        )


if __name__ == "__main__":
    import rich.traceback

    rich.traceback.install(show_locals=True, width=None, suppress=[rich])

    dry_run = "--dry-run" in sys.argv

    config_file = Path.home() / ".dotfiles.toml"
    if not config_file.exists():
        rich.print(
            "[red][bold]error:[/] "
            f"[blue]{escape(str(config_file))}[/] "
            "does not exist![/]"
        )
        rich.print()
        rich.print("You might want to create that file contents like:")
        rich.print()
        rich.print("[green]" + escape(Path("sample.config.toml").read_text()) + "[/]")
        sys.exit(1)

    config = Configuration(config_file)
    sync_files(
        config=config,
        target_dir=Path.home(),
        dry_run=dry_run,
    )
